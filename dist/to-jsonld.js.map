{"version":3,"sources":["to-jsonld.js"],"names":["createFunctions","toLdGraph","toJsonLd","addToJsonLd","nodeId","nodeObj","node","soul","isNode","val","opts","_","wasVisited","id","ids","visited","log","indexOf","visit","push","addContext","jsonld","isFirstVisit","context","schemaUrl","getFields","fields","$fields","nodePaths","paths","concat","uniqFields","Set","filter","length","logger","logging","args","buildNode","nodeVal","graphId","addDefaultOpts","Object","assign","fullPath","iterateFields","nodeValue","recurseField","fieldValue","prepareOpts","defaultOpts","path","field","fieldNode","parentNode","$val","$id","result","json","JSON","stringify","spacer","chain","$toJsonLd","$toLdGraph"],"mappings":"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","file":"to-jsonld.js","sourcesContent":["import Gun from 'gun/gun'\n\nfunction nodeId(nodeObj) {\n  return Gun.node.soul(nodeObj)\n}\n\nfunction isNode(val, opts) {\n  return val._\n}\n\nfunction wasVisited(id, opts) {\n  let ids = opts.visited.ids\n  opts.log('visited ids', ids, '==', id)\n  return ids.indexOf(id) >= 0\n}\n\nfunction visit(id, opts) {\n  opts.visited.ids.push(id)\n}\n\nfunction addContext(jsonld, node, opts) {\n  if (!isFirstVisit(node, opts)) return jsonld\n\n  let context = opts.schemaUrl || 'http://schema.org/'\n  opts.log('root node:', context)\n  jsonld['@context'] = context\n  return jsonld\n}\n\nasync function getFields(node, opts) {\n  let fields = await node.$fields()\n  let nodePaths = opts.paths || []\n  nodePaths = nodePaths.concat(node._.paths || [])\n\n  if (nodePaths) {\n    fields = fields.concat(nodePaths)\n  }\n\n  let uniqFields = [...new Set(fields)]\n\n  if (opts.filter) {\n    uniqFields = opts.filter(uniqFields, node, opts)\n  }\n  return uniqFields\n}\n\nconst isFirstVisit = (node, opts) => {\n  return !opts.visited || opts.visited.ids.length === 0\n}\n\nconst logger = (opts = {}) => {\n  return function log(...args) {\n    if (opts.logging) {\n      console.log('toLdGraph:', ...args)\n    }\n  }\n}\n\nconst buildNode = (nodeVal, node, opts) => {\n  let jsonld = {}\n\n  // if context node\n  jsonld = opts.addContext(jsonld, node, opts)\n\n  let nodeId = opts.nodeId(nodeVal)\n  opts.log('node id:', nodeId)\n\n  let id = opts.graphId(nodeId, opts)\n  jsonld['@id'] = id\n\n  return {\n    jsonld,\n    nodeId\n  }\n}\n\nconst graphId = (id) => '#' + id\n\nfunction addDefaultOpts(opts) {\n  opts = Object.assign({\n    isFirstVisit,\n    wasVisited,\n    visit,\n    addContext,\n    graphId,\n    isNode,\n    buildNode,\n    logger,\n    nodeId,\n    getFields,\n    fullPath,\n    iterateFields,\n    nodeValue,\n    recurseField,\n    fieldValue,\n    prepareOpts\n  }, opts)\n\n  opts.log = opts.log || opts.logger(opts)\n  return opts\n}\n\n\nlet defaultOpts = {}\n\nexport function createFunctions(opts) {\n  defaultOpts = addDefaultOpts(opts)\n  return {\n    toLdGraph,\n    toJsonLd\n  }\n}\n\nconst fullPath = (id, opts) => {\n  let path = (opts.path || '') + '/' + id\n  delete opts.path\n  return path\n}\n\nconst prepareOpts = (opts) => {\n  opts.visited = opts.visited || {\n    ids: []\n  }\n  return opts\n}\n\nasync function recurseField(field, node, fullPath, opts) {\n  opts.log('recurse', field)\n  let fieldNode = node.path(field)\n  opts.path = fullPath + '/' + field\n  opts.parentNode = node\n  return await toLdGraph(fieldNode, opts)\n}\n\nasync function iterateFields(jsonld, node, nodeId, opts) {\n  let fullPath = opts.fullPath(nodeId, opts)\n\n  let fields = await opts.getFields(node, opts)\n\n  opts.log('parse fields', fields)\n  for (let field of fields) {\n    jsonld[field] = await opts.recurseField(field, node, fullPath, opts)\n  }\n  return jsonld\n}\n\nasync function nodeValue(node) {\n  return await node.$val()\n}\n\nconst fieldValue = (val) => val\n\nexport async function toLdGraph(node, opts = {}) {\n  opts = Object.assign(addDefaultOpts(defaultOpts), opts)\n  let log = opts.log\n\n  let nodeVal = await opts.nodeValue(node)\n\n  if (!opts.isNode(nodeVal)) {\n    log('field', nodeVal)\n    return opts.fieldValue(nodeVal, opts)\n  }\n\n  let {\n    jsonld,\n    nodeId\n  } = opts.buildNode(nodeVal, node, opts)\n\n  log('build node', jsonld)\n  opts.$id = jsonld['@id']\n\n  opts = opts.prepareOpts(opts)\n\n  if (opts.wasVisited(nodeId, opts)) {\n    log('already visited:', jsonld)\n    return jsonld\n  }\n\n  opts.visit(nodeId, opts)\n\n  jsonld = await opts.iterateFields(jsonld, node, nodeId, opts)\n\n  log('jsonld:', jsonld)\n  return jsonld\n}\n\nexport async function toJsonLd(node, opts = {}) {\n  let result = await toLdGraph(node, opts = {})\n  return {\n    result,\n    json: JSON.stringify(result, null, opts.spacer || 2)\n  }\n}\n\nexport function addToJsonLd(chain) {\n  chain.$toJsonLd = function (opts) {\n    return toJsonLd(this, opts)\n  }\n\n  chain.$toLdGraph = function (opts) {\n    return toLdGraph(this, opts)\n  }\n\n  return chain\n}\n\nexport default addToJsonLd"]}