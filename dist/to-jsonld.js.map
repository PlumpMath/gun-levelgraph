{"version":3,"sources":["to-jsonld.js"],"names":["toLdGraph","toJsonLd","self","opts","val","$val","_","id","node","soul","visited","ids","jsonld","indexOf","push","fullPath","path","parse","field","fieldNode","fields","$fields","paths","concat","result","json","JSON","stringify","spacer","chain","$toJsonLd"],"mappings":";;;;;QAEsBA,S,GAAAA,S;QAwCAC,Q,GAAAA,Q;;AA1CtB;;;;;;AAEO,eAAeD,SAAf,CAAyBE,IAAzB,EAA0C;AAAA,MAAXC,IAAW,uEAAJ,EAAI;;AAC/C,MAAIC,MAAM,MAAMF,KAAKG,IAAL,EAAhB;AACA,MAAI,CAACD,IAAIE,CAAT,EAAY;AACV,WAAOF,GAAP;AACD;;AAED,MAAIG,KAAK,cAAIC,IAAJ,CAASC,IAAT,CAAcL,GAAd,CAAT;;AAEAD,OAAKO,OAAL,GAAeP,KAAKO,OAAL,IAAgB;AAC7BC,SAAK;AADwB,GAA/B;;AAIA,MAAIC,SAAS;AACX,WAAOL;AADI,GAAb;AAGA,MAAIJ,KAAKO,OAAL,CAAaC,GAAb,CAAiBE,OAAjB,CAAyBN,EAAzB,KAAgC,CAApC,EAAuC;AACrC,WAAOK,MAAP;AACD;;AAEDT,OAAKO,OAAL,CAAaC,GAAb,CAAiBG,IAAjB,CAAsBP,EAAtB;AACA,MAAIQ,WAAW,CAACZ,KAAKa,IAAL,IAAa,EAAd,IAAoB,GAApB,GAA0BT,EAAzC;AACA,SAAOJ,KAAK,OAAL,CAAP;;AAEA,iBAAec,KAAf,CAAqBC,KAArB,EAA4B;AAC1B,QAAIC,YAAY,MAAMjB,KAAKc,IAAL,CAAUE,KAAV,CAAtB;AACAf,SAAKa,IAAL,GAAYD,WAAW,GAAX,GAAiBG,KAA7B;AACA,WAAO,MAAMlB,UAAUmB,SAAV,EAAqBhB,IAArB,CAAb;AACD;;AAED,MAAIiB,SAAS,MAAMlB,KAAKmB,OAAL,EAAnB;AACA,MAAIlB,KAAKmB,KAAT,EAAgB;AACdF,aAASA,OAAOG,MAAP,CAAcpB,KAAKmB,KAAnB,CAAT;AACD;AAhC8C;AAAA;AAAA;;AAAA;AAiC/C,yBAAkBF,MAAlB,8HAA0B;AAAA,UAAjBF,KAAiB;;AACxBN,aAAOM,KAAP,IAAgB,MAAMD,MAAMC,KAAN,CAAtB;AACD;AAnC8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqC/C,SAAON,MAAP;AACD;;AAEM,eAAeX,QAAf,CAAwBC,IAAxB,EAAyC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;;AAC9C,MAAIqB,SAAS,MAAMxB,UAAUE,IAAV,EAAgBC,OAAO,EAAvB,CAAnB;AACA,SAAO;AACLqB,kBADK;AAELC,UAAMC,KAAKC,SAAL,CAAeH,MAAf,EAAuB,IAAvB,EAA6BrB,KAAKyB,MAAL,IAAe,CAA5C;AAFD,GAAP;AAID;;AAED,cAAIC,KAAJ,CAAUC,SAAV,GAAsB,gBAAgB3B,IAAhB,EAAsB;AAC1C,SAAO,MAAMF,SAAS,IAAT,EAAeE,IAAf,CAAb;AACD,CAFD","file":"to-jsonld.js","sourcesContent":["import Gun from 'gun/gun'\n\nexport async function toLdGraph(self, opts = {}) {\n  let val = await self.$val()\n  if (!val._) {\n    return val\n  }\n\n  let id = Gun.node.soul(val)\n\n  opts.visited = opts.visited || {\n    ids: []\n  }\n\n  let jsonld = {\n    '@id': id\n  }\n  if (opts.visited.ids.indexOf(id) >= 0) {\n    return jsonld\n  }\n\n  opts.visited.ids.push(id)\n  let fullPath = (opts.path || '') + '/' + id\n  delete opts['paths']\n\n  async function parse(field) {\n    let fieldNode = await self.path(field)\n    opts.path = fullPath + '/' + field\n    return await toLdGraph(fieldNode, opts)\n  }\n\n  let fields = await self.$fields()\n  if (opts.paths) {\n    fields = fields.concat(opts.paths)\n  }\n  for (let field of fields) {\n    jsonld[field] = await parse(field)\n  }\n\n  return jsonld\n}\n\nexport async function toJsonLd(self, opts = {}) {\n  let result = await toLdGraph(self, opts = {})\n  return {\n    result,\n    json: JSON.stringify(result, null, opts.spacer || 2)\n  }\n}\n\nGun.chain.$toJsonLd = async function (opts) {\n  return await toJsonLd(this, opts)\n}"]}