{"version":3,"sources":["to-jsonld.js"],"names":["createFunctions","toLdGraph","toJsonLd","addToJsonLd","nodeId","nodeObj","node","soul","isNode","val","opts","_","wasVisited","id","ids","visited","log","indexOf","visit","push","defaultCtx","schemaUrl","addContext","jsonld","nodeVal","isFirstVisit","nodeCtx","context","getFields","fields","$fields","nodePaths","paths","concat","uniqFields","Set","filter","length","logger","logging","args","buildNode","fullPath","buildfullPath","graphId","join","addDefaultOpts","Object","assign","iterateFields","nodeValue","recurseField","fieldValue","referenceNode","prepareOpts","defaultOpts","path","field","fieldNode","parentNode","$val","$id","result","json","JSON","stringify","spacer","chain","$toJsonLd","$toLdGraph"],"mappings":"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","file":"to-jsonld.js","sourcesContent":["import Gun from 'gun/gun'\n\nfunction nodeId(nodeObj) {\n  return Gun.node.soul(nodeObj)\n}\n\nfunction isNode(val, opts) {\n  return val._\n}\n\nfunction wasVisited(id, opts) {\n  let ids = opts.visited.ids\n  opts.log('visited ids', ids, '==', id)\n  return ids.indexOf(id) >= 0\n}\n\nfunction visit(id, opts) {\n  opts.visited.ids.push(id)\n}\n\nconst defaultCtx = function (opts) {\n  return {\n    '@vocab': opts.schemaUrl\n  }\n}\n\nfunction addContext(jsonld, node, nodeVal, opts) {\n  if (!isFirstVisit(node, opts)) return jsonld\n\n  let nodeCtx = node.context ? node.context(nodeVal, opts) : false\n  let context = nodeCtx || opts.context || defaultCtx(opts)\n  opts.log('context:', context)\n  jsonld['@context'] = context\n  return jsonld\n}\n\nasync function getFields(node, opts) {\n  let fields = await node.$fields()\n  let nodePaths = opts.paths || []\n  nodePaths = nodePaths.concat(node._.paths || [])\n\n  if (nodePaths) {\n    fields = fields.concat(nodePaths)\n  }\n\n  let uniqFields = [...new Set(fields)]\n\n  if (opts.filter) {\n    uniqFields = opts.filter(uniqFields, node, opts)\n  }\n  return uniqFields\n}\n\nconst isFirstVisit = (node, opts) => {\n  return !opts.visited || opts.visited.ids.length === 0\n}\n\nconst logger = (opts = {}) => {\n  return function log(...args) {\n    if (opts.logging) {\n      console.log('toLdGraph:', ...args)\n    }\n  }\n}\n\nconst buildNode = (nodeVal, node, opts) => {\n  let jsonld = {}\n\n  // if context node\n  jsonld = opts.addContext(jsonld, node, nodeVal, opts)\n\n  let nodeId = opts.nodeId(nodeVal)\n  opts.log('node id:', nodeId)\n\n  let fullPath = opts.buildfullPath(nodeId, opts)\n\n  let id = opts.graphId(nodeId, fullPath, opts)\n  jsonld['@id'] = id\n\n  return {\n    jsonld,\n    nodeId,\n    fullPath\n  }\n}\n\nconst graphId = (id, fullPath, opts) => {\n  return [opts.schemaUrl, id].join('/')\n}\n\nfunction addDefaultOpts(opts) {\n  opts = Object.assign({\n    schemaUrl: 'http://xmlns.com/foaf/0.1',\n    isFirstVisit,\n    wasVisited,\n    visit,\n    addContext,\n    graphId,\n    isNode,\n    buildNode,\n    logger,\n    nodeId,\n    getFields,\n    buildfullPath,\n    iterateFields,\n    nodeValue,\n    recurseField,\n    fieldValue,\n    referenceNode,\n    prepareOpts\n  }, opts)\n\n  opts.log = opts.log || opts.logger(opts)\n  return opts\n}\n\n\nlet defaultOpts = {}\n\nexport function createFunctions(opts) {\n  defaultOpts = addDefaultOpts(opts)\n  return {\n    toLdGraph,\n    toJsonLd\n  }\n}\n\nconst buildfullPath = (id, opts) => {\n  let path = opts.path ? [opts.path, id].join('/') : id\n  delete opts.path\n  return path\n}\n\nconst prepareOpts = (opts) => {\n  opts.visited = opts.visited || {\n    ids: []\n  }\n  return opts\n}\n\nasync function recurseField(field, node, opts) {\n  opts.log('recurse', field)\n  let fieldNode = node.path(field)\n  opts.path = opts.fullPath + '/' + field\n  opts.parentNode = node\n  return await toLdGraph(fieldNode, opts)\n}\n\nasync function iterateFields(jsonld, node, nodeId, opts) {\n  let fields = await opts.getFields(node, opts)\n\n  opts.log('parse fields', fields)\n  for (let field of fields) {\n    jsonld[field] = await opts.recurseField(field, node, opts)\n  }\n  return jsonld\n}\n\nasync function nodeValue(node) {\n  return await node.$val()\n}\n\nconst referenceNode = function (jsonld, opts) {\n  jsonld['@type'] = '@id'\n  return jsonld\n}\n\nconst fieldValue = (val) => val\n\nexport async function toLdGraph(node, opts = {}) {\n  opts = Object.assign(addDefaultOpts(defaultOpts), opts)\n  let log = opts.log\n\n  let nodeVal = await opts.nodeValue(node)\n\n  if (!opts.isNode(nodeVal)) {\n    log('field', nodeVal)\n    return opts.fieldValue(nodeVal, opts)\n  }\n\n  let {\n    jsonld,\n    fullPath,\n    nodeId\n  } = opts.buildNode(nodeVal, node, opts)\n\n  opts.fullPath = fullPath\n\n  log('build node', jsonld)\n  opts.$id = jsonld['@id']\n\n  opts = opts.prepareOpts(opts)\n\n  if (opts.wasVisited(nodeId, opts)) {\n    log('already visited:', jsonld)\n    return opts.referenceNode(jsonld)\n  }\n\n  opts.visit(nodeId, opts)\n\n  jsonld = await opts.iterateFields(jsonld, node, nodeId, opts)\n\n  log('jsonld:', jsonld)\n  return jsonld\n}\n\nexport async function toJsonLd(node, opts = {}) {\n  let result = await toLdGraph(node, opts = {})\n  return {\n    result,\n    json: JSON.stringify(result, null, opts.spacer || 2)\n  }\n}\n\nexport function addToJsonLd(chain) {\n  chain.$toJsonLd = function (opts) {\n    return toJsonLd(this, opts)\n  }\n\n  chain.$toLdGraph = function (opts) {\n    return toLdGraph(this, opts)\n  }\n\n  return chain\n}\n\nexport default addToJsonLd"]}