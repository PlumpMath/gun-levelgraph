{"version":3,"sources":["levelgraph.js"],"names":["createForLvGraph","levelup","require","levelgraph","jsonld","defaultOpts","dbPath","defaultJsonldOpts","base","logger","opts","log","logging","args","buildOpts","Object","assign","jsonldOpts","levelDB","lvGraphDB","db","_opts","dbOptions","lvPut","jsonldObj","cb","Error","put","$lvPut","saveToLvGraph","lvGet","iri","context","get","$lvGet","ctx","lvDel","obj","del","$lvDel","lvCut","$lvCut","lvSearch","list","search","$lvSearch","lvSearchStream","searchStream","commands","addLvGraph","chain","calcJsonLd","node","result","json","calcGraphNodeId","defaultId","soul","graphId","calcGraphNodeCtx","defaultCtx","graphCtx","getLvGraphNode","graphNode","lvGraphNode","lgPut","lgDel","lvObj","lgCut"],"mappings":"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","file":"levelgraph.js","sourcesContent":["const levelup = require('levelup')\nconst levelgraph = require('levelgraph')\nconst jsonld = require('levelgraph-jsonld')\n\nimport {\n  toJsonLd\n} from './to-jsonld'\n\nimport {\n  promisify,\n  promisify2,\n  promisify3\n} from './promisify'\n\nconst defaultOpts = {\n  dbPath: './gundb',\n}\n\nconst defaultJsonldOpts = {\n  base: 'http://gun.io/base'\n}\n\nconst logger = (opts = {}) => {\n  return function log(...args) {\n    if (opts.logging) {\n      console.log('LvGraph:', ...args)\n    }\n  }\n}\n\nfunction buildOpts(opts) {\n  opts = Object.assign(defaultOpts, opts)\n\n  let jsonldOpts = Object.assign(defaultJsonldOpts, opts.jsonldOpts)\n\n  opts.levelDB = opts.levelDB || levelup(opts.dbPath)\n  opts.lvGraphDB = opts.lvGraphDB || levelgraph(opts.levelDB)\n  opts.db = opts.db || jsonld(opts.lvGraphDB, jsonldOpts)\n  opts.logger = opts.logger || logger\n  opts.log = opts.log || opts.logger(opts)\n\n  return opts\n}\n\nexport function createForLvGraph(_opts) {\n  const dbOptions = buildOpts(_opts)\n  const db = dbOptions.db\n  const jsonld = db.jsonld\n\n  // graphdb.jsonld.put = function(obj, options, callback)\n  const lvPut = function (jsonldObj, cb, opts = {}) {\n    opts = Object.assign(dbOptions, opts)\n    const db = opts.db\n    const jsonld = opts.jsonld || db.jsonld\n\n    if (!db) {\n      throw new Error('lvPut: no db specified')\n    }\n    opts.log('lvPut', jsonldObj, opts)\n    // graphdb.jsonld.put = function(obj, options, callback)\n    db.jsonld.put(jsonldObj, opts, cb)\n  }\n\n  //  graphdb.jsonld.put = function(obj, options, callback) {\n  const $lvPut = function (jsonld, opts) {\n    return promisify2(saveToLvGraph, jsonld, opts)\n  }\n\n  // options is optional, otherwise callback is 3rd arg\n  // graphdb.jsonld.get = function(iri, context, options, callback) {\n  const lvGet = function (iri, context, cb, opts = {}) {\n    opts = Object.assign(dbOptions, opts)\n    // opts.log('get', iri, context, cb)\n    const db = opts.db\n    const jsonld = opts.jsonld || db.jsonld\n\n    if (!jsonld) {\n      throw new Error('lvGet: no db specified')\n    }\n    opts.log('lvGet', iri, context, opts)\n    // graphdb.jsonld.get = function(iri, context, options, callback) {\n    jsonld.get(iri, context, opts, cb)\n  }\n\n  //  graphdb.jsonld.put = function(obj, options, callback) {\n  const $lvGet = function (iri, ctx, opts) {\n    return promisify3(lvGet, iri, ctx, opts)\n  }\n\n  // options is optional, otherwise callback is 2rd arg\n  // graphdb.jsonld.del = function(obj, options, callback) {\n  const lvDel = function (obj, cb, opts = {}) {\n    opts = Object.assign(dbOptions, opts)\n    const db = opts.db\n    const jsonld = opts.jsonld || db.jsonld\n\n    if (!jsonld) {\n      throw new Error('lvDel: no db specified')\n    }\n    opts.log('lvDel', obj, opts)\n    // graphdb.jsonld.get = function(iri, context, options, callback) {\n    jsonld.del(obj, opts, cb)\n  }\n\n  //  graphdb.jsonld.put = function(obj, options, callback) {\n  const $lvDel = function (obj, opts) {\n    return promisify2(lvDel, obj, opts)\n  }\n\n  // graphdb.jsonld.cut = function(obj, options, callback) {\n  const lvCut = function (obj, cb, opts = {}) {\n    opts = Object.assign(dbOptions, opts)\n    const db = opts.db\n    const jsonld = opts.jsonld || db.jsonld\n\n    if (!jsonld) {\n      throw new Error('lvDel: no db specified')\n    }\n    opts.log('lvCut', obj, opts)\n    // graphdb.jsonld.get = function(iri, context, options, callback) {\n    jsonld.del(obj, opts, cb)\n  }\n\n  //  graphdb.jsonld.put = function(obj, options, callback) {\n  const $lvCut = function (obj, opts) {\n    return promisify2(lvDel, obj, opts)\n  }\n\n  // options optional\n  // See https://github.com/mcollina/levelgraph#limit-and-offset-1\n  // db.search(list, options, function(err, solution))\n  const lvSearch = function (list, cb, opts = {}) {\n    opts = Object.assign(dbOptions, opts)\n    const db = opts.db\n    if (!db) {\n      throw new Error('lvDel: no db specified')\n    }\n    opts.log('lvSearch', obj, opts)\n    // graphdb.jsonld.get = function(iri, context, options, callback) {\n    db.search(obj, opts, cb)\n  }\n\n  //  graphdb.jsonld.put = function(obj, options, callback) {\n  const $lvSearch = function (list, opts) {\n    return promisify2(lvSearch, list, opts)\n  }\n\n  // options optional\n  // See https://github.com/mcollina/levelgraph#limit-and-offset-1\n  // db.search(list, options, function(err, solution))\n  const lvSearchStream = function (list, opts = {}) {\n    opts = Object.assign(dbOptions, opts)\n    const db = opts.db\n    if (!db) {\n      throw new Error('lvDel: no db specified')\n    }\n    opts.log('lvSearch', obj, opts)\n    // graphdb.jsonld.get = function(iri, context, options, callback) {\n    return db.searchStream(obj, opts)\n  }\n\n  const commands = {\n    lvPut,\n    $lvPut,\n    lvGet,\n    $lvGet,\n    lvDel,\n    $lvDel,\n    lvCut,\n    $lvCut,\n    lvSearch,\n    $lvSearch,\n    lvSearchStream\n  }\n\n  function addLvGraph(chain) {\n\n    async function calcJsonLd(node, opts) {\n      let result = await toJsonLd(node, opts.jsonld)\n      let {\n        json\n      } = result\n      return json\n    }\n\n    function calcGraphNodeId(node, opts) {\n      let defaultId = 'gun:' + node.soul(opts)\n      return node.graphId ? node.graphId(opts) : defaultId\n    }\n\n    function calcGraphNodeCtx(node, opts) {\n      let defaultCtx = {\n        '@context': 'http://gun.js.org'\n      }\n      return node.graphCtx ? node.graphCtx(opts) : defaultCtx\n    }\n\n    async function getLvGraphNode(node, opts) {\n      let graphNode\n      graphNode = (typeof this.lvGraphNode === 'function') ? this.lvGraphNode(this) : this.lvGraphNode\n      if (graphNode) return graphNode\n      let iri = calcGraphNodeId(node, opts)\n      let ctx = calcGraphNodeCtx(node, opts)\n      if (iri) {\n        return await $lvGet(iri, ctx, opts)\n      }\n    }\n\n    chain.lgPut = async function (cb, opts) {\n      let jsonld = await calcJsonLd(this)\n      return lvPut(jsonld, cb, opts)\n    }\n\n    chain.$lvPut = async function (opts) {\n      let jsonld = await calcJsonLd(this)\n      return $lvPut(jsonld, opts)\n    }\n\n    chain.lgDel = function (cb, opts) {\n      // it needs to either cache a ref to the lvGraph node\n      // or call get with the @id first, before calling del\n      let lvObj = getLvGraphNode(this, opts)\n      return lvDel(lvObj, cb, opts)\n    }\n\n    chain.$lvDel = function (cb, opts) {\n      // it needs to either cache a ref to the lvGraph node\n      // or call get with the @id first, before calling del\n      let lvObj = getLvGraphNode(this, opts)\n      return $lvDel(lvObj, opts)\n    }\n\n    chain.lgCut = function (cb, opts) {\n      // it needs to either cache a ref to the lvGraph node\n      // or call get with the @id first, before calling del\n      let lvObj = getLvGraphNode(this, opts)\n      return lvCut(lvObj, cb, opts)\n    }\n\n    chain.$lvCut = function (cb, opts) {\n      // it needs to either cache a ref to the lvGraph node\n      // or call get with the @id first, before calling del\n      let lvObj = getLvGraphNode(this, opts)\n      return $lvCut(lvObj, opts)\n    }\n    return chain\n  }\n\n  return {\n    addLvGraph,\n    commands,\n    db,\n    jsonld,\n    dbOptions\n  }\n}\n\nexport default createForLvGraph"]}